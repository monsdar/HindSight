# Generated by Django 5.2.7 on 2025-10-13 17:58

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


def _get_or_create_team(apps, name: str, abbreviation: str):
    Team = apps.get_model("predictions", "NbaTeam")
    name = (name or "").strip()
    abbreviation = (abbreviation or "").strip()

    if not name and not abbreviation:
        return None

    team = None
    if abbreviation:
        team = Team.objects.filter(abbreviation__iexact=abbreviation).first()
    if team is None and name:
        team = Team.objects.filter(name__iexact=name).first()

    if team is None:
        team = Team.objects.create(
            name=name or abbreviation or "Unknown",
            abbreviation=abbreviation,
        )
        return team

    changed = False
    if name and team.name != name:
        team.name = name
        changed = True
    if abbreviation and team.abbreviation != abbreviation:
        team.abbreviation = abbreviation
        changed = True
    if changed:
        team.save()
    return team


def seed_prediction_events(apps, schema_editor):
    TipType = apps.get_model("predictions", "TipType")
    ScheduledGame = apps.get_model("predictions", "ScheduledGame")
    PredictionEvent = apps.get_model("predictions", "PredictionEvent")
    PredictionOption = apps.get_model("predictions", "PredictionOption")
    UserTip = apps.get_model("predictions", "UserTip")

    now = django.utils.timezone.now()
    sort_tracker: dict[int, int] = {}
    event_map: dict[int, object] = {}

    games = ScheduledGame.objects.select_related("tip_type").order_by("game_date")
    for game in games:
        if game.tip_type_id is None:
            continue

        opens_at = min(now, game.game_date)
        sort_index = sort_tracker.get(game.tip_type_id, 0) + 1
        sort_tracker[game.tip_type_id] = sort_index
        defaults = {
            "tip_type_id": game.tip_type_id,
            "name": f"{game.away_team_tricode} @ {game.home_team_tricode}".strip(),
            "description": f"{game.away_team} at {game.home_team}",
            "target_kind": "team",
            "selection_mode": "curated",
            "opens_at": opens_at,
            "deadline": game.game_date,
            "reveal_at": opens_at,
            "is_active": True,
            "sort_order": sort_index,
        }

        event, created = PredictionEvent.objects.get_or_create(
            scheduled_game=game,
            defaults=defaults,
        )
        if not created:
            updated = False
            for field, value in defaults.items():
                if getattr(event, field) != value:
                    setattr(event, field, value)
                    updated = True
            if updated:
                event.save()

        event_map[game.id] = event

        home_team = _get_or_create_team(apps, game.home_team, game.home_team_tricode)
        away_team = _get_or_create_team(apps, game.away_team, game.away_team_tricode)

        if home_team:
            PredictionOption.objects.get_or_create(
                event=event,
                team=home_team,
                defaults={
                    "label": home_team.name,
                    "sort_order": 2,
                    "is_active": True,
                },
            )
        if away_team:
            PredictionOption.objects.get_or_create(
                event=event,
                team=away_team,
                defaults={
                    "label": away_team.name,
                    "sort_order": 1,
                    "is_active": True,
                },
            )

    tips = UserTip.objects.filter(scheduled_game__isnull=False)
    for tip in tips:
        event = event_map.get(tip.scheduled_game_id)
        if event is None:
            continue

        tip.prediction_event_id = event.id
        tip.tip_type_id = event.tip_type_id

        prediction_value = (tip.prediction or "").strip()
        option = None
        if prediction_value:
            option = (
                PredictionOption.objects.filter(
                    event=event,
                    team__abbreviation__iexact=prediction_value,
                ).first()
            )
            if option is None:
                option = (
                    PredictionOption.objects.filter(
                        event=event,
                        team__name__iexact=prediction_value,
                    ).first()
                )

        if option is not None:
            tip.prediction_option_id = option.id
            if option.team_id:
                tip.selected_team_id = option.team_id
                new_value = option.team.abbreviation or option.team.name
                if new_value:
                    tip.prediction = new_value

        tip.save()

    for tip_type in TipType.objects.all():
        first_event = (
            PredictionEvent.objects.filter(tip_type=tip_type)
            .order_by("deadline", "sort_order")
            .first()
        )
        if first_event is not None:
            tip_type.deadline = first_event.deadline
            tip_type.save(update_fields=["deadline"])


class Migration(migrations.Migration):

    dependencies = [
        ("predictions", "0003_userpreferences"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="NbaPlayer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "balldontlie_id",
                    models.PositiveIntegerField(blank=True, null=True, unique=True),
                ),
                ("first_name", models.CharField(max_length=80)),
                ("last_name", models.CharField(max_length=80)),
                ("display_name", models.CharField(max_length=160)),
                ("position", models.CharField(blank=True, max_length=10)),
            ],
            options={
                "ordering": ["display_name"],
            },
        ),
        migrations.CreateModel(
            name="NbaTeam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "balldontlie_id",
                    models.PositiveIntegerField(blank=True, null=True, unique=True),
                ),
                ("name", models.CharField(max_length=150)),
                ("abbreviation", models.CharField(blank=True, max_length=5)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("conference", models.CharField(blank=True, max_length=30)),
                ("division", models.CharField(blank=True, max_length=30)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="usertip",
            name="selected_player",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tips",
                to="predictions.nbaplayer",
            ),
        ),
        migrations.AddField(
            model_name="nbaplayer",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="players",
                to="predictions.nbateam",
            ),
        ),
        migrations.AddField(
            model_name="usertip",
            name="selected_team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tips",
                to="predictions.nbateam",
            ),
        ),
        migrations.CreateModel(
            name="PredictionEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "target_kind",
                    models.CharField(
                        choices=[("team", "Team"), ("player", "Player")],
                        default="team",
                        max_length=10,
                    ),
                ),
                (
                    "selection_mode",
                    models.CharField(
                        choices=[("any", "Any selection"), ("curated", "Curated list")],
                        default="curated",
                        max_length=10,
                    ),
                ),
                ("opens_at", models.DateTimeField()),
                ("deadline", models.DateTimeField()),
                (
                    "reveal_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="The event becomes visible on or after this timestamp.",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                (
                    "scheduled_game",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prediction_event",
                        to="predictions.scheduledgame",
                    ),
                ),
                (
                    "tip_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="predictions.tiptype",
                    ),
                ),
            ],
            options={
                "ordering": ["deadline", "sort_order", "name"],
            },
        ),
        migrations.AlterUniqueTogether(
            name="usertip",
            unique_together={("user", "tip_type", "scheduled_game")},
        ),
        migrations.AddField(
            model_name="usertip",
            name="prediction_event",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tips",
                to="predictions.predictionevent",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="usertip",
            unique_together={
                ("user", "prediction_event"),
                ("user", "tip_type", "scheduled_game"),
            },
        ),
        migrations.CreateModel(
            name="PredictionOption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(max_length=200)),
                ("is_active", models.BooleanField(default=True)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="predictions.predictionevent",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prediction_options",
                        to="predictions.nbaplayer",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prediction_options",
                        to="predictions.nbateam",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order", "label"],
                "unique_together": {("event", "player"), ("event", "team")},
            },
        ),
        migrations.AddField(
            model_name="usertip",
            name="prediction_option",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tips",
                to="predictions.predictionoption",
            ),
        ),
        migrations.RunPython(seed_prediction_events, migrations.RunPython.noop),
    ]
