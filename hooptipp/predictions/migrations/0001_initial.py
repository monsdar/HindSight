# Generated by Django 5.2.7 on 2025-10-17 20:32

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='NbaTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balldontlie_id', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('name', models.CharField(max_length=150)),
                ('abbreviation', models.CharField(blank=True, max_length=5)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('conference', models.CharField(blank=True, max_length=30)),
                ('division', models.CharField(blank=True, max_length=30)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OptionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text="Icon identifier for UI display (e.g., 'basketball', 'flag', 'check')", max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Option category',
                'verbose_name_plural': 'Option categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PredictionEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('target_kind', models.CharField(choices=[('team', 'Team'), ('player', 'Player'), ('generic', 'Generic')], default='team', max_length=10)),
                ('selection_mode', models.CharField(choices=[('any', 'Any selection'), ('curated', 'Curated list')], default='curated', max_length=10)),
                ('source_id', models.CharField(blank=True, help_text="Identifier for the EventSource that created this event (e.g., 'nba-balldontlie', 'olympics-2028')", max_length=100)),
                ('source_event_id', models.CharField(blank=True, help_text='External event ID from the source system', max_length=200)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Source-specific data and additional event properties')),
                ('points', models.PositiveSmallIntegerField(default=1, help_text='Points awarded for a correct prediction on this event.')),
                ('is_bonus_event', models.BooleanField(default=False, help_text='Indicates whether this event awards more than the default tip type points.')),
                ('opens_at', models.DateTimeField()),
                ('deadline', models.DateTimeField()),
                ('reveal_at', models.DateTimeField(default=django.utils.timezone.now, help_text='The event becomes visible on or after this timestamp.')),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['deadline', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ScheduledGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nba_game_id', models.CharField(max_length=20, unique=True)),
                ('game_date', models.DateTimeField()),
                ('home_team', models.CharField(max_length=100)),
                ('home_team_tricode', models.CharField(max_length=5)),
                ('away_team', models.CharField(max_length=100)),
                ('away_team_tricode', models.CharField(max_length=5)),
                ('venue', models.CharField(blank=True, max_length=150)),
                ('is_manual', models.BooleanField(default=False, help_text='Indicates that the game was added manually rather than via the BallDontLie sync.')),
            ],
            options={
                'verbose_name': 'Scheduled game',
                'verbose_name_plural': 'Scheduled games',
                'ordering': ['game_date'],
            },
        ),
        migrations.CreateModel(
            name='TipType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('game', 'Game'), ('player', 'Player'), ('team', 'Team'), ('season', 'Season')], default='game', max_length=20)),
                ('default_points', models.PositiveSmallIntegerField(default=1, help_text='Base point value awarded for correctly predicting events in this tip type.')),
                ('deadline', models.DateTimeField(help_text='No picks can be submitted after this deadline.')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Tip category',
                'verbose_name_plural': 'Tip categories',
                'ordering': ['deadline'],
            },
        ),
        migrations.CreateModel(
            name='NbaPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balldontlie_id', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('first_name', models.CharField(max_length=80)),
                ('last_name', models.CharField(max_length=80)),
                ('display_name', models.CharField(max_length=160)),
                ('position', models.CharField(blank=True, max_length=10)),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='players', to='predictions.nbateam')),
            ],
            options={
                'ordering': ['display_name'],
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=100)),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(blank=True, help_text="Abbreviated name (e.g., 'LAL' for Lakers, 'USA' for United States)", max_length=50)),
                ('description', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Flexible storage for category-specific data (e.g., team conference, player position)')),
                ('external_id', models.CharField(blank=True, help_text='Reference to external API/system (e.g., BallDontLie team ID)', max_length=200)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='predictions.optioncategory')),
            ],
            options={
                'verbose_name': 'Option',
                'verbose_name_plural': 'Options',
                'ordering': ['category', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PredictionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='predictions.predictionevent')),
                ('option', models.ForeignKey(help_text='Generic option reference for any type of prediction target', on_delete=django.db.models.deletion.CASCADE, related_name='prediction_options', to='predictions.option')),
            ],
            options={
                'ordering': ['sort_order', 'label'],
            },
        ),
        migrations.CreateModel(
            name='EventOutcome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolved_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True)),
                ('scored_at', models.DateTimeField(blank=True, null=True)),
                ('score_error', models.TextField(blank=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_event_outcomes', to=settings.AUTH_USER_MODEL)),
                ('winning_generic_option', models.ForeignKey(blank=True, help_text='The underlying generic Option that won (denormalized for easier querying)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='winning_event_outcomes', to='predictions.option')),
                ('prediction_event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='outcome', to='predictions.predictionevent')),
                ('winning_option', models.ForeignKey(blank=True, help_text='The PredictionOption that won (includes label and event context)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='winning_outcomes', to='predictions.predictionoption')),
            ],
            options={
                'verbose_name': 'Event outcome',
                'verbose_name_plural': 'Event outcomes',
            },
        ),
        migrations.AddField(
            model_name='predictionevent',
            name='scheduled_game',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prediction_event', to='predictions.scheduledgame'),
        ),
        migrations.AddField(
            model_name='scheduledgame',
            name='tip_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='predictions.tiptype'),
        ),
        migrations.AddField(
            model_name='predictionevent',
            name='tip_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='predictions.tiptype'),
        ),
        migrations.CreateModel(
            name='UserEventScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_points', models.PositiveSmallIntegerField()),
                ('lock_multiplier', models.PositiveSmallIntegerField(default=1)),
                ('points_awarded', models.PositiveIntegerField()),
                ('is_lock_bonus', models.BooleanField(default=False)),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('prediction_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='predictions.predictionevent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User event score',
                'verbose_name_plural': 'User event scores',
                'ordering': ['-awarded_at', 'user__username'],
            },
        ),
        migrations.CreateModel(
            name='UserFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favorite_type', models.CharField(help_text="Type of favorite (e.g., 'nba-team', 'olympic-country')", max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='predictions.option')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User favorite',
                'verbose_name_plural': 'User favorites',
                'ordering': ['favorite_type', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(blank=True, max_length=50)),
                ('theme', models.CharField(choices=[('classic', 'HoopTipp Classic (Gold & Midnight)'), ('atlanta-hawks', 'Atlanta Hawks (Red & Black)'), ('boston-celtics', 'Boston Celtics (Green & Black)'), ('brooklyn-nets', 'Brooklyn Nets (Black & White)'), ('charlotte-hornets', 'Charlotte Hornets (Teal & Purple)'), ('chicago-bulls', 'Chicago Bulls (Red & Black)'), ('cleveland-cavaliers', 'Cleveland Cavaliers (Wine & Navy)'), ('dallas-mavericks', 'Dallas Mavericks (Royal & Navy)'), ('denver-nuggets', 'Denver Nuggets (Navy & Gold)'), ('detroit-pistons', 'Detroit Pistons (Blue & Red)'), ('golden-state-warriors', 'Golden State Warriors (Blue & Gold)'), ('houston-rockets', 'Houston Rockets (Red & Black)'), ('indiana-pacers', 'Indiana Pacers (Navy & Gold)'), ('los-angeles-clippers', 'LA Clippers (Blue & Red)'), ('los-angeles-lakers', 'Los Angeles Lakers (Purple & Gold)'), ('memphis-grizzlies', 'Memphis Grizzlies (Blue & Navy)'), ('miami-heat', 'Miami Heat (Red & Gold)'), ('milwaukee-bucks', 'Milwaukee Bucks (Green & Cream)'), ('minnesota-timberwolves', 'Minnesota Timberwolves (Navy & Green)'), ('new-orleans-pelicans', 'New Orleans Pelicans (Navy & Red)'), ('new-york-knicks', 'New York Knicks (Blue & Orange)'), ('oklahoma-city-thunder', 'Oklahoma City Thunder (Blue & Orange)'), ('orlando-magic', 'Orlando Magic (Blue & Black)'), ('philadelphia-76ers', 'Philadelphia 76ers (Blue & Red)'), ('phoenix-suns', 'Phoenix Suns (Purple & Orange)'), ('portland-trail-blazers', 'Portland Trail Blazers (Red & Black)'), ('sacramento-kings', 'Sacramento Kings (Purple & Black)'), ('san-antonio-spurs', 'San Antonio Spurs (Black & Silver)'), ('toronto-raptors', 'Toronto Raptors (Red & Black)'), ('utah-jazz', 'Utah Jazz (Navy & Gold)'), ('washington-wizards', 'Washington Wizards (Navy & Red)')], default='classic', max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User preferences',
                'verbose_name_plural': 'User preferences',
            },
        ),
        migrations.CreateModel(
            name='UserTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction', models.CharField(help_text='Human-readable prediction text', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_locked', models.BooleanField(default=False)),
                ('lock_status', models.CharField(choices=[('none', 'No lock'), ('active', 'Active'), ('returned', 'Returned'), ('forfeited', 'Forfeited')], default='none', max_length=20)),
                ('lock_committed_at', models.DateTimeField(blank=True, null=True)),
                ('lock_released_at', models.DateTimeField(blank=True, null=True)),
                ('lock_releases_at', models.DateTimeField(blank=True, help_text='Scheduled timestamp for automatically returning a forfeited lock.', null=True)),
                ('prediction_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tips', to='predictions.predictionevent')),
                ('prediction_option', models.ForeignKey(blank=True, help_text='The specific option the user selected (references a PredictionOption from the event)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tips', to='predictions.predictionoption')),
                ('selected_option', models.ForeignKey(blank=True, help_text='The underlying generic option selected (denormalized for easier querying)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tips', to='predictions.option')),
                ('tip_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='predictions.tiptype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User tip',
                'verbose_name_plural': 'User tips',
            },
        ),
        migrations.AddIndex(
            model_name='option',
            index=models.Index(fields=['category', 'is_active'], name='predictions_categor_236d80_idx'),
        ),
        migrations.AddIndex(
            model_name='option',
            index=models.Index(fields=['external_id'], name='predictions_externa_18f56e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='option',
            unique_together={('category', 'slug')},
        ),
        migrations.AlterUniqueTogether(
            name='predictionoption',
            unique_together={('event', 'option')},
        ),
        migrations.AddIndex(
            model_name='predictionevent',
            index=models.Index(fields=['source_id', 'source_event_id'], name='predictions_source__afcc43_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionevent',
            index=models.Index(fields=['is_active', 'opens_at', 'deadline'], name='predictions_is_acti_655837_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usereventscore',
            unique_together={('user', 'prediction_event')},
        ),
        migrations.AddIndex(
            model_name='userfavorite',
            index=models.Index(fields=['user', 'favorite_type'], name='predictions_user_id_ad15e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfavorite',
            unique_together={('user', 'favorite_type')},
        ),
        migrations.AddIndex(
            model_name='usertip',
            index=models.Index(fields=['user', 'is_locked'], name='predictions_user_id_532a6e_idx'),
        ),
        migrations.AddIndex(
            model_name='usertip',
            index=models.Index(fields=['prediction_event', 'user'], name='predictions_predict_791da9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usertip',
            unique_together={('user', 'prediction_event')},
        ),
    ]
