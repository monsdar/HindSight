# Generated by Django

from django.db import migrations


def migrate_nba_teams_to_options(apps, schema_editor):
    """Migrate NBA teams to generic Options."""
    OptionCategory = apps.get_model('predictions', 'OptionCategory')
    Option = apps.get_model('predictions', 'Option')
    NbaTeam = apps.get_model('predictions', 'NbaTeam')
    PredictionOption = apps.get_model('predictions', 'PredictionOption')
    EventOutcome = apps.get_model('predictions', 'EventOutcome')
    UserTip = apps.get_model('predictions', 'UserTip')
    
    # Create NBA teams category
    teams_cat, _ = OptionCategory.objects.get_or_create(
        slug='nba-teams',
        defaults={
            'name': 'NBA Teams',
            'description': 'National Basketball Association teams',
            'icon': 'basketball',
            'sort_order': 10,
            'is_active': True,
        }
    )
    
    # Migrate each NBA team to a generic Option
    team_mapping = {}  # Maps NbaTeam.id -> Option.id
    for nba_team in NbaTeam.objects.all():
        option, created = Option.objects.get_or_create(
            category=teams_cat,
            external_id=str(nba_team.balldontlie_id) if nba_team.balldontlie_id else str(nba_team.id),
            defaults={
                'slug': nba_team.abbreviation.lower() if nba_team.abbreviation else nba_team.name.lower().replace(' ', '-'),
                'name': nba_team.name,
                'short_name': nba_team.abbreviation,
                'description': f"{nba_team.city} - {nba_team.conference} Conference",
                'metadata': {
                    'city': nba_team.city,
                    'conference': nba_team.conference,
                    'division': nba_team.division,
                    'nba_team_id': nba_team.id,
                },
                'is_active': True,
                'sort_order': 0,
            }
        )
        team_mapping[nba_team.id] = option.id
    
    # Update PredictionOption records
    for pred_option in PredictionOption.objects.filter(team__isnull=False):
        if pred_option.team_id in team_mapping:
            pred_option.option_id = team_mapping[pred_option.team_id]
            pred_option.save(update_fields=['option_id'])
    
    # Update EventOutcome records
    for outcome in EventOutcome.objects.filter(winning_team__isnull=False):
        if outcome.winning_team_id in team_mapping:
            outcome.winning_generic_option_id = team_mapping[outcome.winning_team_id]
            outcome.save(update_fields=['winning_generic_option_id'])
    
    # Update UserTip records
    for tip in UserTip.objects.filter(selected_team__isnull=False):
        if tip.selected_team_id in team_mapping:
            tip.selected_option_id = team_mapping[tip.selected_team_id]
            tip.save(update_fields=['selected_option_id'])


def migrate_nba_players_to_options(apps, schema_editor):
    """Migrate NBA players to generic Options."""
    OptionCategory = apps.get_model('predictions', 'OptionCategory')
    Option = apps.get_model('predictions', 'Option')
    NbaPlayer = apps.get_model('predictions', 'NbaPlayer')
    NbaTeam = apps.get_model('predictions', 'NbaTeam')
    PredictionOption = apps.get_model('predictions', 'PredictionOption')
    EventOutcome = apps.get_model('predictions', 'EventOutcome')
    UserTip = apps.get_model('predictions', 'UserTip')
    
    # Create NBA players category
    players_cat, _ = OptionCategory.objects.get_or_create(
        slug='nba-players',
        defaults={
            'name': 'NBA Players',
            'description': 'Active NBA players',
            'icon': 'person',
            'sort_order': 20,
            'is_active': True,
        }
    )
    
    # Migrate each NBA player to a generic Option
    player_mapping = {}  # Maps NbaPlayer.id -> Option.id
    for nba_player in NbaPlayer.objects.select_related('team').all():
        team_abbr = nba_player.team.abbreviation if nba_player.team else ''
        option, created = Option.objects.get_or_create(
            category=players_cat,
            external_id=str(nba_player.balldontlie_id) if nba_player.balldontlie_id else str(nba_player.id),
            defaults={
                'slug': f"{nba_player.first_name}-{nba_player.last_name}".lower().replace(' ', '-'),
                'name': nba_player.display_name,
                'short_name': f"{nba_player.first_name[0]}. {nba_player.last_name}" if nba_player.first_name else nba_player.last_name,
                'description': f"{nba_player.position} - {team_abbr}" if team_abbr else nba_player.position,
                'metadata': {
                    'position': nba_player.position,
                    'team_id': nba_player.team_id,
                    'team_name': nba_player.team.name if nba_player.team else '',
                    'nba_player_id': nba_player.id,
                },
                'is_active': True,
                'sort_order': 0,
            }
        )
        player_mapping[nba_player.id] = option.id
    
    # Update PredictionOption records
    for pred_option in PredictionOption.objects.filter(player__isnull=False):
        if pred_option.player_id in player_mapping:
            pred_option.option_id = player_mapping[pred_option.player_id]
            pred_option.save(update_fields=['option_id'])
    
    # Update EventOutcome records
    for outcome in EventOutcome.objects.filter(winning_player__isnull=False):
        if outcome.winning_player_id in player_mapping:
            outcome.winning_generic_option_id = player_mapping[outcome.winning_player_id]
            outcome.save(update_fields=['winning_generic_option_id'])
    
    # Update UserTip records
    for tip in UserTip.objects.filter(selected_player__isnull=False):
        if tip.selected_player_id in player_mapping:
            tip.selected_option_id = player_mapping[tip.selected_player_id]
            tip.save(update_fields=['selected_option_id'])


def reverse_migration(apps, schema_editor):
    """Reverse the migration by clearing generic option references."""
    PredictionOption = apps.get_model('predictions', 'PredictionOption')
    EventOutcome = apps.get_model('predictions', 'EventOutcome')
    UserTip = apps.get_model('predictions', 'UserTip')
    Option = apps.get_model('predictions', 'Option')
    OptionCategory = apps.get_model('predictions', 'OptionCategory')
    
    # Clear generic option references (legacy fields remain)
    PredictionOption.objects.update(option=None)
    EventOutcome.objects.update(winning_generic_option=None)
    UserTip.objects.update(selected_option=None)
    
    # Optionally delete Options and OptionCategories
    Option.objects.filter(category__slug__in=['nba-teams', 'nba-players']).delete()
    OptionCategory.objects.filter(slug__in=['nba-teams', 'nba-players']).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('predictions', '0008_add_generic_option_system'),
    ]

    operations = [
        migrations.RunPython(
            migrate_nba_teams_to_options,
            reverse_migration,
        ),
        migrations.RunPython(
            migrate_nba_players_to_options,
            migrations.RunPython.noop,
        ),
    ]
